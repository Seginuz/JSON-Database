type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;

    public class Main {

        public static final String ADDRESS = "127.0.0.1";
        public static final int PORT = 23456;
        public static final int RECORD_ID = 2733;

        public static void main(String[] args) {
            try (Socket socket = new Socket(InetAddress.getByName(ADDRESS), PORT);
                 DataInputStream input = new DataInputStream(socket.getInputStream());
                 DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                System.out.println("Client started!");

                output.writeInt(RECORD_ID);
                System.out.println("Sent: Give me a record # " + RECORD_ID);

                String response = input.readUTF();
                System.out.println("Received: " + response);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.util.Scanner;

    public class Main {

        static Scanner scanner = new Scanner(System.in);
        static String[] database = new String[100];
        static String result;

        public static final String ADDRESS = "127.0.0.1";
        public static final int PORT = 23456;

        public static void main(String[] args) {
            try (ServerSocket server = new ServerSocket(PORT, 50, InetAddress.getByName(ADDRESS))) {
                System.out.println("Server started!");

                Session session = new Session(server.accept());
                session.start();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    //    public static void main(String[] args) {
    //        Arrays.fill(database, "");
    //
    //        while (true) {
    //            String[] input = scanner.nextLine().split(" ");
    //
    //            String command = input[0];
    //            input[0] = "";
    //            if ("exit".equals(command)) {
    //                return;
    //            }
    //
    //            int index;
    //            try {
    //                index = Integer.parseInt(input[1]) - 1;
    //                input[1] = "";
    //            } catch (Exception e) {
    //                index = -1;
    //            }
    //
    //            String value = String.join(" ", input).trim();
    //
    //            if (index < 0 || index > database.length - 1) {
    //                result = "ERROR";
    //            } else {
    //                switch (command) {
    //                    case "set":
    //                        result = setCell(index, value);
    //                        break;
    //                    case "get":
    //                        result = getCell(index);
    //                        break;
    //                    case "delete":
    //                        result = deleteCell(index);
    //                        break;
    //                    default:
    //                        result = "ERROR";
    //                }
    //            }
    //
    //            System.out.println(result);
    //        }
    //    }
    //
    //    public static String setCell(int index, String input) {
    //        if (index < 0 || index > database.length - 1) {
    //            return "ERROR";
    //        } else {
    //            database[index] = input;
    //            return "OK";
    //        }
    //    }
    //
    //    public static String getCell(int index) {
    //        if ("".equals(database[index])) {
    //            return "ERROR";
    //        } else {
    //            return database[index];
    //        }
    //    }
    //
    //    public static String deleteCell(int index) {
    //        database[index] = "";
    //        return "OK";
    //    }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/server/Session.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class Session extends Thread {

        private final Socket socket;

        public Session(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try (
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                int recordID = input.readInt();
                System.out.println("Received: Give me a record # " + recordID);

                String response = "A record # " + recordID + " was sent!";

                output.writeUTF(response);
                System.out.println("Sent: " + response);
                socket.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: false
- name: src/client/Args.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 09 May 2022 19:46:50 UTC
record: 3
